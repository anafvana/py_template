name: Update .pre-commit-config.yaml for Black

on:
  schedule:
    - cron: "0 0 * * 1" # Runs every Monday at midnight UTC
  workflow_dispatch:
  push:
    branches-ignore:
      - "update-precommit-*"
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  check-repo-versions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install PyYAML requests

      - name: Run update script and capture output
        id: check_versions
        run: |
          # Run the Python script that checks and updates the repos, outputting list of updated repos
          UPDATED_REPOS=$(python3 update_precommit.py)
          echo "updated_repos=$UPDATED_REPOS" >> $GITHUB_ENV
          echo "::set-output name=updated_repos::$UPDATED_REPOS"

      - name: Verify if any repos were updated
        id: verify_updates
        run: |
          if [ "${{ steps.check_versions.outputs.updated_repos }}" = "[]" ]; then
            echo "version_updated=false" >> $GITHUB_OUTPUT
          else
            echo "version_updated=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes if updates were made
        id: commit_push
        if: steps.verify_updates.outputs.version_updated == 'true'
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          # Create unique branch name with date and time
          BRANCH_NAME="update-precommit-$(date +'%Y%m%d%H%M%S')"
          echo "updated_repos=$BRANCH_NAME" >> $GITHUB_ENV
          echo "::set-output name=branch_name::$BRANCH_NAME"
          echo "$BRANCH_NAME"
          git checkout -b $BRANCH_NAME

          # Stage, commit, and push changes
          git add .pre-commit-config.yaml
          git commit -m "ðŸ†™ UPGRADE: Updated versions in pre-commit for ${{ steps.check_versions.outputs.updated_repos }}"
          git push origin $BRANCH_NAME
   
      - name: PRINTING STUFF
        run: |
          echo "updated repos: ${{ steps.check_versions.outputs.updated_repos }}"
          echo "version_updated: ${{ steps.verify_updates.outputs.version_updated }}"
          echo "branch_name: ${{ steps.commit_push.outputs.branch_name }}"

      - name: Checkout to main
        if: steps.verify_updates.outputs.version_updated == 'true'
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Reset main branch
        if: steps.verify_updates.outputs.version_updated == 'true'
        run: |
          git fetch origin ${{ steps.commit_push.outputs.branch_name }}:${{ steps.commit_push.outputs.branch_name }}
          git reset --hard ${{ steps.commit_push.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.verify_updates.outputs.version_updated == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: ${{ steps.commit_push.outputs.branch_name }}
          delete-branch: true
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          commit-message: "ðŸ†™ UPGRADE: Updated versions in pre-commit for ${{ steps.check_versions.outputs.updated_repos }}"
          title: "Update pre-commit versions: ${{ steps.check_versions.outputs.updated_repos }}"
          body: "This PR updates the versions in .pre-commit-config.yaml for the following repos: ${{ steps.check_versions.outputs.updated_repos }}"
          labels: |
            automated
            pre-commit
          draft: false
